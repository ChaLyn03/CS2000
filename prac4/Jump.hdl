// File name: Jump.hdl

/**
 * The jump unit determines whether the Program Counter should jump.
 * A jump is performed if any of the j1 j2 j3 bits of the c-instruction 
 * are true, AND the matching condition is met:
 *   j1: jump if ALU output is < 0
 *   j2: jump if ALU output   == 0
 *   j3: jump if ALU output is > 0
 * If multiple of these bits are set true, then jump if any of 
 * those conditions are met,
 * e.g. if j1 and j2 are both set true, jump if < 0 or == 0 
 * The ALU output is determined through the zr and ng wires:
 *   zr: is true when the ALU's output   == 0, false otherwise
 *   ng: is true when the ALU's output is < 0, false otherwise
 * If both zr and ng are false, then the ALU's output is > 0
 */

CHIP Jump {
    IN  j1,          // c-instruction j1
        j2,          // c-instruction j2
        j3,          // c-instruction j3
        zr,          // zr pin from ALU
        ng;          // ng pin from ALU

    OUT jump;        // true if a jump should be performed, false otherwise 

    PARTS:
    // Determine if ALU output is <= 0
    Or(a=zr, b=ng, out=lte);
    
    // Determine if ALU output is > 0
    Not(in=lte, out=gt);
    
    // Check each jump condition
    And(a=j1, b=ng, out=jumpBecauseLT);
    And(a=j2, b=zr, out=jumpBecauseEQ);
    And(a=j3, b=gt, out=jumpBecauseGT);
    
    // Combine the conditions to determine if a jump should occur
    Or(a=jumpBecauseLT, b=jumpBecauseGT, out=jumpBecauseLTGT);
    Or(a=jumpBecauseLTGT, b=jumpBecauseEQ, out=jump);
}
